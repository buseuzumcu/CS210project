{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOHOaingP6801RtmXy8zP2p",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/buseuzumcu/CS210project/blob/main/MailAnalysisCode\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3p6-fBg1RCsV"
      },
      "outputs": [],
      "source": [
        "import mailbox\n",
        "import pandas as pd\n",
        "from bs4 import BeautifulSoup  # Make sure to install the 'beautifulsoup4' package\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from wordcloud import WordCloud\n",
        "import networkx as nx\n",
        "\n",
        "\n",
        "# Replace 'path/to/your/mbox/file' with the actual path to your MBOX file\n",
        "mbox_file_path = r\"C:\\Users\\Buse\\takeout-20240118T200310Z-001\\Takeout\\Mail\\All mail Including Spam and Trash.mbox\"\n",
        "\n",
        "# Create a mailbox object from the MBOX file\n",
        "mbox = mailbox.mbox(mbox_file_path)\n",
        "\n",
        "# Create an empty list to store email data\n",
        "email_data = []\n",
        "\n",
        "# Iterate through each email in the MBOX file\n",
        "for message in mbox:\n",
        "    # Extract relevant information\n",
        "    sender = message.get('From')\n",
        "    recipients = message.get('To')\n",
        "    date = message.get('Date')\n",
        "    subject = message.get('Subject')\n",
        "\n",
        "    # Extract content from the email payload (handle multipart)\n",
        "    content = \"\"\n",
        "    if message.is_multipart():\n",
        "        for part in message.walk():\n",
        "            if part.get_content_type() == \"text/plain\":\n",
        "                content += part.get_payload(decode=True).decode('utf-8', errors='ignore')\n",
        "            elif part.get_content_type() == \"text/html\":\n",
        "                # Use BeautifulSoup to extract text from HTML content\n",
        "                soup = BeautifulSoup(part.get_payload(decode=True).decode('utf-8', errors='ignore'), 'html.parser')\n",
        "                content += soup.get_text(separator=' ', strip=True)\n",
        "    else:\n",
        "        content = message.get_payload(decode=True).decode('utf-8', errors='ignore')\n",
        "\n",
        "    # Append the information to the list\n",
        "    email_data.append({\n",
        "        'Sender': sender,\n",
        "        'Recipients': recipients,\n",
        "        'Date': date,\n",
        "        'Subject': subject,\n",
        "        'Content': content\n",
        "    })\n",
        "\n",
        "    # Print information for debugging\n",
        "    print(f\"Sender: {sender}\")\n",
        "    print(f\"Recipients: {recipients}\")\n",
        "    print(f\"Date: {date}\")\n",
        "    print(f\"Subject: {subject}\")\n",
        "    print(f\"Content: {content}\")\n",
        "    print(\"-\" * 50)\n",
        "\n",
        "# Create a Pandas DataFrame from the email data\n",
        "df = pd.DataFrame(email_data)\n",
        "\n",
        "# Descriptive statistics for numerical data (if applicable)\n",
        "summary_stats = df.describe()\n",
        "\n",
        "# Count of emails sent/received\n",
        "count_emails_sent = df[df['Sender'].notnull()].shape[0]\n",
        "count_emails_received = df[df['Recipients'].notnull()].shape[0]\n",
        "\n",
        "# Most common sender/recipients\n",
        "most_common_sender = df['Sender'].mode().values[0]\n",
        "most_common_recipients = df['Recipients'].mode().values[0]\n",
        "\n",
        "# Display results\n",
        "print(\"Summary Statistics:\")\n",
        "print(summary_stats)\n",
        "print(\"\\nCount of Emails Sent/Received:\")\n",
        "print(f\"Sent: {count_emails_sent} emails\")\n",
        "print(f\"Received: {count_emails_received} emails\")\n",
        "print(\"\\nMost Common Sender/Recipients:\")\n",
        "print(f\"Most Common Sender: {most_common_sender}\")\n",
        "print(f\"Most Common Recipients: {most_common_recipients}\")\n",
        "df['Date'] = pd.to_datetime(df['Date'], errors='coerce')\n",
        "df.set_index('Date', inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Histogram for email frequency\n",
        "plt.figure(figsize=(12, 6))\n",
        "df.resample('M').size().plot(legend=False)\n",
        "plt.title('Email Frequency Over Time')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Number of Emails')\n",
        "plt.show()\n",
        "\n",
        "# Time series plots for email activity over time\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.lineplot(data=df.resample('D').size())\n",
        "plt.title('Daily Email Activity Over Time')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Number of Emails')\n",
        "plt.show()\n",
        "\n",
        "# Word cloud for common words in email subjects\n",
        "subject_text = ' '.join(df['Subject'].dropna())\n",
        "wordcloud_subject = WordCloud(width=800, height=400, max_words=200, background_color='white').generate(subject_text)\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.imshow(wordcloud_subject, interpolation='bilinear')\n",
        "plt.axis('off')\n",
        "plt.title('Word Cloud for Email Subjects')\n",
        "plt.show()\n",
        "\n",
        "# Word cloud for common words in email content\n",
        "content_text = ' '.join(df['Content'].dropna())\n",
        "wordcloud_content = WordCloud(width=800, height=400, max_words=200, background_color='white').generate(content_text)\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.imshow(wordcloud_content, interpolation='bilinear')\n",
        "plt.axis('off')\n",
        "plt.title('Word Cloud for Email Content')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "umKapagGRFQ9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Perform sentiment analysis using VADER\n",
        "analyzer = SentimentIntensityAnalyzer()\n",
        "df['Sentiment'] = df['Content'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\n",
        "\n",
        "# Clustering using k-means on TF-IDF features of the content\n",
        "tfidf_vectorizer = TfidfVectorizer(stop_words='english')\n",
        "tfidf_matrix = tfidf_vectorizer.fit_transform(df['Content'].dropna())\n",
        "\n",
        "# Determine the optimal number of clusters using the elbow method\n",
        "distortions = []\n",
        "for i in range(1, 11):\n",
        "    kmeans = KMeans(n_clusters=i, random_state=42)\n",
        "    kmeans.fit(tfidf_matrix)\n",
        "    distortions.append(kmeans.inertia_)\n",
        "\n",
        "# Plot the elbow method\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.plot(range(1, 11), distortions, marker='o')\n",
        "plt.title('Elbow Method for Optimal k')\n",
        "plt.xlabel('Number of Clusters (k)')\n",
        "plt.ylabel('Distortion')\n",
        "plt.show()\n",
        "\n",
        "# Choose the optimal k and perform k-means clustering\n",
        "optimal_k = 3  # Adjust based on the elbow method plot\n",
        "kmeans = KMeans(n_clusters=optimal_k, random_state=42)\n",
        "df['Cluster'] = kmeans.fit_predict(tfidf_matrix)\n",
        "\n",
        "# Display the clusters\n",
        "for cluster_id in range(optimal_k):\n",
        "    cluster_emails = df[df['Cluster'] == cluster_id]['Subject'].head(5)  # Displaying 5 emails from each cluster\n",
        "    print(f\"\\nCluster {cluster_id + 1}:\\n{cluster_emails}\")\n",
        "\n",
        "# Visualize sentiment distribution\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.histplot(df['Sentiment'], bins=30, kde=True)\n",
        "plt.title('Sentiment Distribution of Emails')\n",
        "plt.xlabel('Sentiment Score')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "rp8JHKRLRIxz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "email_graph = nx.DiGraph()\n",
        "\n",
        "# Add nodes and edges to the graph\n",
        "for _, row in df.iterrows():\n",
        "    sender = row['Sender']\n",
        "    recipients = row['Recipients'].split(', ') if row['Recipients'] else []\n",
        "\n",
        "    # Add sender node\n",
        "    email_graph.add_node(sender)\n",
        "\n",
        "    # Add recipients nodes and edges\n",
        "    for recipient in recipients:\n",
        "        email_graph.add_node(recipient)\n",
        "        email_graph.add_edge(sender, recipient)\n",
        "\n",
        "# Visualize the network graph\n",
        "pos = nx.spring_layout(email_graph)  # You can try different layout algorithms\n",
        "nx.draw(email_graph, pos, with_labels=True, node_size=10, font_size=8, font_color='black', alpha=0.7)\n",
        "plt.title('Email Interactions Network Graph')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "zK7h98J8RSuZ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}