import mailbox
import pandas as pd
from bs4 import BeautifulSoup  # Make sure to install the 'beautifulsoup4' package
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
import networkx as nx


# Replace 'path/to/your/mbox/file' with the actual path to your MBOX file
mbox_file_path = r"C:\Users\Buse\takeout-20240118T200310Z-001\Takeout\Mail\All mail Including Spam and Trash.mbox"

# Create a mailbox object from the MBOX file
mbox = mailbox.mbox(mbox_file_path)

# Create an empty list to store email data
email_data = []

# Iterate through each email in the MBOX file
for message in mbox:
    # Extract relevant information
    sender = message.get('From')
    recipients = message.get('To')
    date = message.get('Date')
    subject = message.get('Subject')

    # Extract content from the email payload (handle multipart)
    content = ""
    if message.is_multipart():
        for part in message.walk():
            if part.get_content_type() == "text/plain":
                content += part.get_payload(decode=True).decode('utf-8', errors='ignore')
            elif part.get_content_type() == "text/html":
                # Use BeautifulSoup to extract text from HTML content
                soup = BeautifulSoup(part.get_payload(decode=True).decode('utf-8', errors='ignore'), 'html.parser')
                content += soup.get_text(separator=' ', strip=True)
    else:
        content = message.get_payload(decode=True).decode('utf-8', errors='ignore')

    # Append the information to the list
    email_data.append({
        'Sender': sender,
        'Recipients': recipients,
        'Date': date,
        'Subject': subject,
        'Content': content
    })

    # Print information for debugging
    print(f"Sender: {sender}")
    print(f"Recipients: {recipients}")
    print(f"Date: {date}")
    print(f"Subject: {subject}")
    print(f"Content: {content}")
    print("-" * 50)

# Create a Pandas DataFrame from the email data
df = pd.DataFrame(email_data)

# Descriptive statistics for numerical data (if applicable)
summary_stats = df.describe()

# Count of emails sent/received
count_emails_sent = df[df['Sender'].notnull()].shape[0]
count_emails_received = df[df['Recipients'].notnull()].shape[0]

# Most common sender/recipients
most_common_sender = df['Sender'].mode().values[0]
most_common_recipients = df['Recipients'].mode().values[0]

# Display results
print("Summary Statistics:")
print(summary_stats)
print("\nCount of Emails Sent/Received:")
print(f"Sent: {count_emails_sent} emails")
print(f"Received: {count_emails_received} emails")
print("\nMost Common Sender/Recipients:")
print(f"Most Common Sender: {most_common_sender}")
print(f"Most Common Recipients: {most_common_recipients}")
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
df.set_index('Date', inplace=True)


# Histogram for email frequency
plt.figure(figsize=(12, 6))
df.resample('M').size().plot(legend=False)
plt.title('Email Frequency Over Time')
plt.xlabel('Time')
plt.ylabel('Number of Emails')
plt.show()

# Time series plots for email activity over time
plt.figure(figsize=(12, 6))
sns.lineplot(data=df.resample('D').size())
plt.title('Daily Email Activity Over Time')
plt.xlabel('Time')
plt.ylabel('Number of Emails')
plt.show()

# Word cloud for common words in email subjects
subject_text = ' '.join(df['Subject'].dropna())
wordcloud_subject = WordCloud(width=800, height=400, max_words=200, background_color='white').generate(subject_text)

plt.figure(figsize=(10, 5))
plt.imshow(wordcloud_subject, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud for Email Subjects')
plt.show()

# Word cloud for common words in email content
content_text = ' '.join(df['Content'].dropna())
wordcloud_content = WordCloud(width=800, height=400, max_words=200, background_color='white').generate(content_text)

plt.figure(figsize=(10, 5))
plt.imshow(wordcloud_content, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud for Email Content')
plt.show()


# Perform sentiment analysis using VADER
analyzer = SentimentIntensityAnalyzer()
df['Sentiment'] = df['Content'].apply(lambda x: analyzer.polarity_scores(x)['compound'])

# Clustering using k-means on TF-IDF features of the content
tfidf_vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf_vectorizer.fit_transform(df['Content'].dropna())

# Determine the optimal number of clusters using the elbow method
distortions = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(tfidf_matrix)
    distortions.append(kmeans.inertia_)

# Plot the elbow method
plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), distortions, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Distortion')
plt.show()

# Choose the optimal k and perform k-means clustering
optimal_k = 3  # Adjust based on the elbow method plot
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
df['Cluster'] = kmeans.fit_predict(tfidf_matrix)

# Display the clusters
for cluster_id in range(optimal_k):
    cluster_emails = df[df['Cluster'] == cluster_id]['Subject'].head(5)  # Displaying 5 emails from each cluster
    print(f"\nCluster {cluster_id + 1}:\n{cluster_emails}")

# Visualize sentiment distribution
plt.figure(figsize=(8, 5))
sns.histplot(df['Sentiment'], bins=30, kde=True)
plt.title('Sentiment Distribution of Emails')
plt.xlabel('Sentiment Score')
plt.ylabel('Frequency')
plt.show()


email_graph = nx.DiGraph()

# Add nodes and edges to the graph
for _, row in df.iterrows():
    sender = row['Sender']
    recipients = row['Recipients'].split(', ') if row['Recipients'] else []

    # Add sender node
    email_graph.add_node(sender)

    # Add recipients nodes and edges
    for recipient in recipients:
        email_graph.add_node(recipient)
        email_graph.add_edge(sender, recipient)

# Visualize the network graph
pos = nx.spring_layout(email_graph)  # You can try different layout algorithms
nx.draw(email_graph, pos, with_labels=True, node_size=10, font_size=8, font_color='black', alpha=0.7)
plt.title('Email Interactions Network Graph')
plt.show()
